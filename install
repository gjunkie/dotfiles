#!/usr/bin/env bash
LOG="${HOME}/Library/Logs/dotfiles.log"
GITHUB_USER="gjunkie"
GIT_AUTHOR_NAME=""
GIT_AUTHOR_EMAIL=""

# Make sure only root can run our script
# if [ "$(id -u)" != "0" ]; then
#    echo "This script must be run as root" 1>&2
#    exit 1
# fi

# Check for environment variable for directory, otherwise set to default
if [[ ! -z ${DOTFILES_DIRECTORY} ]]; then
	DIR="${DOTFILES_DIRECTORY}"
else
	DIR="/usr/local/opt/dotfiles"
fi

# Helper functions
_warning() {
	echo "$(date) WARNING:  $@" >> $LOG
	printf "$(tput setaf 3)⚠ Warning:$(tput sgr0) %s!\n" "$@"
}

_error() {
	echo "$(date) ERROR:  $@" >> $LOG
	printf "$(tput setaf 1)⊘ Error:$(tput sgr0) %s. Aborting!\n" "$@"
	exit 1
}

_process() {
	echo "$(date) PROCESSING:  $@" >> $LOG
	printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

setup_dotfiles() {
	# If missing, download and extract the dotfiles repository
	if [[ -d "${DIR}" ]]; then
		_process "→ Dotfiles already installed.  Upgrading dotfiles"
		dotfiles
	else
		_process "→ Creating directory at ${DIR} and setting permissions"
		mkdir -p "${DIR}"

		_process "→ Downloading repository to /tmp directory"
		# (-#) shows the progress bar as # sign
		# (-f) fail silently
		# (-L) follow the headers
		# (-o) output to a file
		curl -#fLo /tmp/dotfiles.tar.gz "https://github.com/${GITHUB_USER}/dotfiles/tarball/master"

		_process "→ Extracting files to ${DIR}"
		tar -zxf /tmp/dotfiles.tar.gz --strip-components 1 -C "${DIR}"

		_process "→ Removing tarball from /tmp directory"
		rm -rf /tmp/dotfiles.tar.gz

		[[ $? ]] && _success "${DIR} created, repository downloaded and extracted"
	fi

	# Change to the dotfiles directory
	cd "${DIR}"
}

install_git() {
  _process "→ Installing git"

  brew install git

  [[ $? ]] \
  && _success "Installed git"
}

setup_git_authorship() {
	GIT_AUTHOR_NAME=eval "git config user.name"

	if [[ ! -z "$GIT_AUTHOR_NAME" ]]; then
		# Setup git authorship
		_process "→ Setting up Git author"
		# Git author name
		_question "What's your name"
		read USER_GIT_AUTHOR_NAME
		if [[ ! -z "$USER_GIT_AUTHOR_NAME" ]]; then
			GIT_AUTHOR_NAME="${USER_GIT_AUTHOR_NAME}"
			$(git config --global user.name "$GIT_AUTHOR_NAME")
		else
			_warning "No Git user name has been set.  Please update manually"
		fi

		# Git author email
		_question "What's your email"
		read USER_GIT_AUTHOR_EMAIL
		if [[ ! -z "$USER_GIT_AUTHOR_EMAIL" ]]; then
			GIT_AUTHOR_EMAIL="${USER_GIT_AUTHOR_EMAIL}"
			$(git config --global user.email "$GIT_AUTHOR_EMAIL")
		else
			_warning "No Git user email has been set.  Please update manually"
		fi
	else
		_process "→ Git author already set, moving on..."
	fi
}

install_homebrew() {
	_process "→ Installing Homebrew"
	if [[ "$OSTYPE" =~ ^darwin ]]; then
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	else
		ruby -e "$(wget -O- https://raw.github.com/Homebrew/linuxbrew/go/install)"
	fi


	_process "→ Running brew doctor"
	brew doctor
	[[ $? ]] \
	&& _success "Installed Homebrew"
}

install_formulae() {
	if ! type -P 'brew' &> /dev/null; then
		_error "Homebrew not found"
	else
		_process "→ Installing Homebrew packages"

		# Set variable for list of homebrew formulaes
		brews="${DIR}/opt/homebrew"

		# Update and upgrade all packages
		_process "→ Updating and upgrading Homebrew packages"
		brew update
		brew upgrade

		# Tap some necessary formulae
		brew tap homebrew/cask-versions
		brew tap homebrew/cask-drivers
		brew tap vitorgalvao/tiny-scripts

		# Store IFS within a temp variable
		OIFS=$IFS

		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n' formulae=($(cat "${brews}"))

		# Loop through split list of formulae
		_process "→ Checking status of desired Homebrew formulae"
		for index in ${!formulae[*]}
		do
			# Test whether a Homebrew formula is already installed
			if ! brew list ${formulae[$index]} &> /dev/null; then
				brew install ${formulae[$index]}
			fi
		done

		# Reset IFS back
		IFS=$OIFS

		brew cleanup

		[[ $? ]] && _success "All Homebrew packages installed and updated"
	fi
}

install_node_packages() {
	if ! type -P 'npm' &> /dev/null; then
		_error "npm not found"
	else
		_process "→ Installing npm packages"

		# Set variable for list of npm packages
		npmfile="${DIR}/opt/npm"

		# Store IFS within a temp variable
		OIFS=$IFS

		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n' packages=($(cat "${npmfile}"))

		# Loop through array
		for index in ${!packages[*]}
		do
			npm install --global --quiet ${packages[$index]}
		done

		# Reset IFS back
		IFS=$OIFS

		[[ $? ]] && _success "Installed all npm packages"
	fi
}

copy_files() {
	_process "→ Copying vim folder"
	cp -r "${DIR}/configs/vim" "${HOME}/.vim"
	_process "→ Copying bash folder"
	cp -r "${DIR}/configs/bash" "${HOME}/.bash"

	# copy over files to the HOME directory. These were
	# originally symlinks but ran into permissions issues
	# with Docker containers.
	if [[ -f "${DIR}/opt/files" ]]; then
		_process "→ Copying files"

		# Set variable for list of files
		files="${DIR}/opt/files"

		# Store IFS within a temp variable
		OIFS=$IFS

		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n'
		links=($(cat "${files}"))

		# Loop through array
		for index in ${!links[*]}
		do
			for link in ${links[$index]}
			do
				# set IFS back to space to split string on
				IFS=$' '
				# create an array of line items
				file=(${links[$index]})
				# Create symbolic link
				cp "${DIR}/${file[0]}" "${HOME}/${file[1]}"
			done
			# set separater back to carriage return & new line break
			IFS=$'\r\n'
		done

		# Reset IFS back
		IFS=$OIFS

		[[ $? ]] && _success "All files have been copied"
	fi
}

initialize_repo() {
	# Initialize the git repository if it's missing
	_process "→ Initializing git repository"
	git init

	_process "→ Adding https://github.com/${GITHUB_USER}/dotfiles.git as origin"
	git remote add origin "https://github.com/${GITHUB_USER}/dotfiles.git"

	_process "→ Downloading changes from origin"
	git fetch origin master

	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	_process "→ Resetting index & working tree to fetched HEAD"
	git reset --hard FETCH_HEAD

	# Remove any untracked files
	_process "→ Removing any untracked files"
	git clean -fd

	# Pull down the latest changes
	_process "→ Pulling down latest changes"
	git pull origin master

	[[ $? ]] && _success "Repository has been initialized"
}

update_vim_bundles() {
	# Check for Vim; install bundles
	if [[ -f "${HOME}/.vim/config/bundles.vim" ]]; then
		_process "→ Updating ViM bundles"

		vim +'PlugInstall --sync' +qa

		[[ $? ]] && _success "Updated ViM bundles"
	fi
}

main() {
	if ! type -P 'brew' &> /dev/null; then
		install_homebrew
	fi

	if ! type -P 'git' &> /dev/null; then
		install_git
	fi

	setup_git_authorship

	setup_dotfiles

	# Install Node
	if ! type -P 'npm' &> /dev/null; then
		_process "→ Installing node"

		curl https://www.npmjs.org/install.sh | sh

		[[ $? ]] \
		&& _success "Installed npm"
	fi

	install_node_packages

	install_formulae

	initialize_repo

	# Force remove the vim directory if it's already there.
	if [ -e "${HOME}/.vim" ]; then
		_warning "Removing ${HOME}/.vim/ directory"
		rm -rf "${HOME}/.vim"
	fi

	# Force remove the bash directory if it's already there.
	if [ -e "${HOME}/.bash" ]; then
		_warning "Removing ${HOME}/.bash/ directory"
		rm -rf "${HOME}/.bash"
	fi

	copy_files

	_process "Installing vim-plug"
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

	_process "Installing Tmux Plugin Manager"
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

	update_vim_bundles

  ln -fs "${DIR}/bin/dotfiles" "/usr/local/bin/dotfiles"
  chmod 755 "/usr/local/bin/dotfiles"

	. "${HOME}/.bash_profile"

	[[ $? ]] && _success "Dotfiles installed."

}

initialize_prompt() {
	echo "
	########################################
	###                                  ###
	###       dotfiles installation      ###
	###                                  ###
	########################################"

	# see: https://ss64.com/bash/read.html
	read -n 1 -p "You are about to begin dotfiles installation. Press [Enter] to continue, [Esc] to cancel." key
	if [[ $key = "" ]]; then 
		main
	else
		echo \
		&& echo "$(tput setaf 1)Aborting installation...$(tput sgr0)"
		exit 1
	fi
}

initialize_prompt
