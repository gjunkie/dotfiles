readonly PROGNAME="$(basename "$0")"
readonly PROGDIR="/usr/local/opt/dotfiles"
readonly ARGS="$@"

# Check for environment variable for directory, otherwise set to default
if [[ ! -z ${DOTFILES_DIRECTORY} ]]; then
	DIR="${DOTFILES_DIRECTORY}"
else
	DIR="/usr/local/opt/dotfiles"
fi

# Status methods
_error() {
	local message=$1
	printf "%s⊘ Error:%s %s. Aborting!\n\n" "$(tput setaf 1)" "$(tput sgr0)" "$message"
}

_error_out() {
	_print_error "No $PROGDIR found!"
	printf 'Run the installer <%shttps://github.com/gjunkie/dotfiles#one-line-install%s>\n' "$(tput smul)" "$(tput rmul)"
	exit 1
}

_process() {
	printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
	local message=$1
	printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

_exists() {
	local var=$1
	[[ -e $var ]]
}

_is_empty() {
	local var=$1
	[[ -z $var ]]
}

_is_not_valid_option() {
	local option=$1
	printf "bash: %s: %s: invalid option\n" "$PROGNAME" "$option"
}

_print_help() {
	_usage
	cat <<- EOF
	OPTIONS:
		-c --color         Choose a color scheme
		-d --dotfiles      Update repo and copy dotfiles
		-e --edit          Launch Vim and edit dotfiles
		-h --help          Show this help
		-s --software      Update brews, gems, and npm packages
		-u --update        Pull the latest from the dotfiles repo
	Examples:
		Run all tests:
		$PROGNAME --test
	Print current version:
		$PROGNAME --version
	Run:
		$PROGNAME
	EOF
}

_usage() {
	printf "%s: usage: %s [-h|--help] [--update]"  "$PROGNAME" "$PROGNAME"
}

# options
cmdline() {
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
			--color)        args="${args}-c ";;
			--dotfiles)     args="${args}-d ";;
			--edit)         args="${args}-e ";;
			--help)         args="${args}-h ";;
			--software)     args="${args}-s ";;
			# --test)         args="${args}-t ";;
			--update)		    args="${args}-u ";;
			# --version)      args="${args}-v ";;
			#pass through anything else
			*) [[ "${arg:0:1}" == "-" ]] || delim="\""
				args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- "$args"

	while getopts ":ehptv" OPTION
	do
		case $OPTION in
			c)
				_set_colorscheme
				exit 0
				;;
			d)
				_dotfiles
				exit 0
				;;
			e)
				_edit
				exit 0
				;;
			h)
				_print_help
				exit 0
				;;
			s)
				_software
				exit 0
				;;
			u)
				update_repo
				exit 0
				;;
			\?)
				_is_not_valid_option "-$OPTARG"
				_usage
				exit 1
				;;
		esac
	done

	return 0
}

_edit() {
	cd "$PROGDIR" \
	&& vim
}

_dotfiles() {
	update_repo
	setup_vim
	setup_bash
}

setup_vim() {
  # Force remove the vim directory if it's already there.
	_exists "${HOME}/.vim" \
	&& rm -rf "${HOME}/.vim"

	ln -s "${DIR}/configs/vim" "${HOME}/.vim"

	if [[ -d "${DIR}/configs/nvim" ]]; then
    rm "${DIR}/configs/nvim/init.vim"
    ln -s "${DIR}/configs/nvim/init.vim" "${HOME}/.config/nvim/init.vim"
  else
    mkdir "${DIR}/configs/nvim"
    ln -s "${DIR}/configs/nvim/init.vim" "${HOME}/.config/nvim/init.vim"
  fi


	[[ $? ]] && _success "Copied vim folder"
}

setup_bash() {
  # Force remove the bash directory if it's already there.
	_exists "${HOME}/.bash" \
	&& rm -rf "${HOME}/.bash"

	ln -s "${DIR}/configs/bash" "${HOME}/.bash"
	# cp "${DIR}/configs/bash/colorschemes/base_colors.sh" "${HOME}/.bash/prompt/base_colors.sh"
	[[ $? ]] && _success "Copied bash folder"
}

update_vim_bundles() {
	_process "Installing vim-plug"
	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

	# Check for Vim; install bundles
	if [[ -f "${HOME}/.vim/config/bundles.vim" ]]; then
		vim +'PlugInstall --sync' +qa

		[[ $? ]] && _success "Updated ViM bundles"
	fi
}
# 
# copy_config_files() {
# 
# }

install_formulae() {
	# Updating Homebrew
	brew update

	# Upgrade Homebrew formulaes
	brew upgrade
  brews="${PROGDIR}/opt/homebrew"
}
# 
# upgrade_node() {
# 
# }
# 
# install_node_packages() {
# 
# }

_set_colorscheme() {
	# copy over files to the HOME directory. These were
	# originally symlinks but ran into permissions issues
	# with Docker containers.
	if [[ -f "${DIR}/configs/bash/colorschemes" ]]; then
		_process "→ Changing colorscheme"

		# Set variable for list of files
		colors="${DIR}/configs/bash/colorschemes"

		# Store IFS within a temp variable
		OIFS=$IFS

		# Set the separator to a carriage return & a new line break
		# read in passed-in file and store as an array
		IFS=$'\r\n'
		links=($(cat "${colors}"))

    printf "Please select folder:\n"
    select d in */; do test -n "$d" && break; echo ">>> Invalid Selection"; done
    cd "$d" && pwd
		# Loop through array
		# for index in ${!links[*]}
		# do
			# for link in ${links[$index]}
			# do
				# set IFS back to space to split string on
				# IFS=$' '
				# create an array of line items
				# file=(${links[$index]})
				# Create symbolic link
				# cp "${DIR}/${file[0]}" "${HOME}/${file[1]}"
			# done
			# set separater back to carriage return & new line break
			# IFS=$'\r\n'
		# done

		# Reset IFS back
		IFS=$OIFS

		[[ $? ]] && _success "All files have been copied"
	fi
}

update_repo() {
	cd "$PROGDIR"

	_process "→ Downloading changes from origin"
	git fetch origin main

	dirty=`echo -n "${gstatus}" 2> /dev/null | grep "Changes not staged for commit" &> /dev/null; echo "$?"`
	if [ "${dirty}" == "0" ]; then
    _error "You have uncommitted changes. Commit your changes or reset them prior to updating."
		exit 1
	fi

	# Reset the index and working tree to the fetched HEAD
	# (submodules are cloned in the subsequent sync step)
	_process "→ Resetting index & working tree to fetched HEAD"
	git reset --hard FETCH_HEAD

	# Remove any untracked files
	_process "→ Removing any untracked files"
	git clean -fd

	# Pull down the latest changes
	_process "→ Pulling down latest changes"
	git pull origin main

	chmod 755 "/usr/local/bin/dotfiles"

	[[ $? ]] && _success "Repository has been updated"
}

main() {
	_is_empty "$PROGDIR" \
	&& error_out

	cmdline "$ARGS"

	update_repo
	install_formulae
	setup_vim
	setup_bash
	update_vim_bundles

	. "${HOME}/.bash_profile"
	. "${HOME}/.bashrc"

	[[ $? ]] && _success "Dotfiles updated."
}

main
